buildscript {
	repositories {
		jcenter()
		mavenCentral()
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
		classpath "com.google.protobuf:protobuf-gradle-plugin:$protobuf_gradle_plugin_version"
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
	}
}

apply plugin: 'base'


allprojects {
	apply plugin: 'java'
	apply plugin: 'groovy'
	apply plugin: 'eclipse'
	apply plugin: 'idea'

	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
	group project_group
	version = project_version
	sourceCompatibility = java_version
	targetCompatibility = java_version
	idea {
		module {
			downloadJavadoc = true
			downloadSources = true
		}
	}
	eclipse {
		classpath {
			downloadJavadoc = true
			downloadSources = true
		}
	}

//	task 'create-dirs' {
//		doLast {
////			sourceSets*.java.srcDirs*.each { it.mkdirs() }
//			sourceSets*.resources.srcDirs*.each { it.mkdirs() }
//			sourceSets*.kotlin.srcDirs*.each { it.mkdirs() }
//			sourceSets.test.groovy.srcDirs*.each { it.mkdirs() }
//		}
//	}

	repositories {
		mavenCentral()
		jcenter()
		maven {
			url  'https://dl.bintray.com/archmagece/jvm-repo'
		}
		mavenLocal()
	}

	dependencies {
		compile "org.codehaus.groovy:groovy-all:$groovy_version"

		compileOnly "org.projectlombok:lombok:$lombok_version"
		testCompileOnly "org.projectlombok:lombok:$lombok_version"
	}

	task stage(dependsOn: ['build'])
	build.mustRunAfter clean


	apply plugin: 'maven'
	apply plugin: 'maven-publish'
	apply plugin: 'com.jfrog.bintray'

	def pomConfig = {
		licenses {
			license {
				name 'Apache-2.0'
				url 'https://opensource.org/licenses/Apache-2.0'
				distribution 'repo'
			}
		}
		developers {
			developer {
				id 'archmagece'
				name 'archmagece'
				email 'archmagece@gmail.com'
			}
		}

		scm {
			url 'https://github.com/ScriptonBasestar/spring-business-wrapper'
		}
	}

	task sourcesJar(type: Jar) {
		from sourceSets.main.java.srcDirs
		classifier = 'sources'
//		from sourceSets.main.kotlin
		duplicatesStrategy = "exclude"
//		def platformSrc = sourceSets.main.kotlin
//		def commonSrc = project(':common').sourceSets.main.kotlin
//		from (platformSrc + commonSrc)
	}

//	task javadocJar(type: Jar, dependsOn: javadoc) {
//		classifier = 'javadoc'
//		from javadoc.destinationDir
//	}

	publishing {
		publications {
			MyPublication(MavenPublication) {
				from components.java
				artifact sourcesJar
//				artifact javadocJar
				groupId project_group
				artifactId project.name
				version project_version
			}
		}
	}

	bintray {
		user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
		key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
		publications = ['MyPublication']
		pkg {
			repo = 'jvm-repo'
			name = 'spring-business-wrapper'
			userOrg = 'archmagece'
			licenses = ['MIT']
			vcsUrl = 'https://github.com/ScriptonBasestar/spring-business-wrapper.git'
			version {
				name = project_version
				desc = "released at ${new Date()} : $project_version"
				released = new Date()
				vcsTag = project_version
//				attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
			}
		}
	}
}

subprojects {
	dependencies {
		//test
		testCompile "junit:junit:$junit_version"
		testCompile "org.springframework.boot:spring-boot-test:$spring_boot_version"
		testCompile "org.springframework.boot:spring-boot-starter-test:$spring_boot_version"
		testCompile "org.springframework.security:spring-security-test:$spring_security_version"
		testCompile "com.jayway.jsonpath:json-path:$jayway_jsonpath_version"
		testCompile "com.google.guava:guava-testlib:$guava_version"

		//logging
		compile "org.springframework.boot:spring-boot-starter-logging:$spring_boot_version"
	}

	clean {
		delete 'out'
	}
}
