apply plugin: Auth0OSS

class Auth0OSS implements Plugin<Project> {

	void apply(Project target) {
		target.extensions.create("spring-security-business", Auth0Extension, target)
		target.configure(target) {
			apply plugin: 'maven-publish'

			target.task("sourcesJar", type: Jar, dependsOn: classes) {
				classifier = 'sources'
				from sourceSets.main.allSource
			}
			javadoc {
				options.encoding = 'UTF-8'
			}
			target.task("javadocJar", type: Jar, dependsOn: javadoc) {
				classifier = 'javadoc'
				from javadoc.getDestinationDir()
			}

			artifacts {
				archives sourcesJar, javadocJar
			}

			publishing {
				publications {
					mavenJava(MavenPublication) {
						from components.java
						afterEvaluate {
							artifact sourcesJar
							artifact javadocJar

//							groupId project.group
//							artifactId project.name
//							artifactId = jar.baseName
//							version project.version

							groupId project_group
							artifactId project.name
							version project_version
						}
					}
				}
			}

//			publishing.publications.all {
//				pom.withXml {
//
//					def lib = project.extensions."spring-security-business"
//					def root = asNode()
//
//					root.appendNode('packaging', 'jar')
//					root.appendNode('name', lib.name)
//					root.appendNode('description', lib.description)
//					root.appendNode('url', lib.url)
//
//					def developersNode = root.appendNode('developers')
//					project.extensions."spring-security-business".developers.each {
//						def node = developersNode.appendNode('developer')
//						node.appendNode('id', it.id)
//						node.appendNode('name', it.name)
//						node.appendNode('email', it.email)
//					}
//
////					def dependenciesNode = root.appendNode('dependencies')
////
////					configurations.compile.allDependencies.each {
////						def dependencyNode = dependenciesNode.appendNode('dependency')
////						dependencyNode.appendNode('groupId', it.group)
////						dependencyNode.appendNode('artifactId', it.name)
////						dependencyNode.appendNode('version', it.version)
////					}
////					root.dependencies.children.each { node -> root.dependencies.remove(node) }
////					// re-add dependencies with fully-qualified versions
////					def dependencies = root.dependencies[0]
////					project.configurations.runtime.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
////						println("=============")
////						println(dependencies)
////						println(dep)
////						println(it)
////						def dependency = dependencies.appendNode('dependency')
////						dependency.appendNode('groupId', dep.moduleGroup)
////						dependency.appendNode('artifactId', dep.moduleName)
////						dependency.appendNode('version', dep.moduleVersion)
////						dependency.appendNode('scope', 'runtime')
////					}
//
//					def licenceNode = root.appendNode('licenses').appendNode('license')
//					licenceNode.appendNode('name', 'The MIT License (MIT)')
//					licenceNode.appendNode('url', "https://raw.githubusercontent.com/ScriptonBasestar-Lib/${lib.repo}/master/LICENSE")
//					licenceNode.appendNode('distribution', 'repo')
//
//					def scmNode = root.appendNode('scm')
//					scmNode.appendNode('connection', "scm:git@github.com:ScriptonBasestar-Lib/${lib.repo}.git")
//					scmNode.appendNode('developerConnection', "scm:git@github.com:ScriptonBasestar-Lib/${lib.repo}.git")
//					scmNode.appendNode('url', "https://github.com/ScriptonBasestar-Lib/${lib.repo}")
//				}
//			}
		}
	}
}

class Auth0Extension {
	String name
	String repo
	String description
	String url
	List<Developer> developers = []

	private Project project

	Auth0Extension(project) {
		this.project = project
	}

	void developer(Closure<Developer> developerClosure) {
		def developer = project.configure(new Developer(), developerClosure)
		developers.add(developer)
	}
}

class Developer {
	String id
	String name
	String email
}



